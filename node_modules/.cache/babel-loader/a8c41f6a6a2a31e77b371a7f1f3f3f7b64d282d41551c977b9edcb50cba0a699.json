{"ast":null,"code":"var _jsxFileName = \"/Users/aniruddhkapileshwari/Desktop/FALL24/EWA/Project/my-react-app/src/Component/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [chat, setChat] = useState([]);\n  const sendMessage = async () => {\n    try {\n      // Send the user input to the Rasa REST API\n      const response = await axios.post('http://localhost:5005/webhooks/rest/webhook', {\n        sender: \"user\",\n        message: message\n      });\n\n      // Process the bot's response\n      const botResponse = response.data[0];\n      const botMessage = (botResponse === null || botResponse === void 0 ? void 0 : botResponse.text) || \"Sorry, I didn't understand that.\";\n      const buttons = (botResponse === null || botResponse === void 0 ? void 0 : botResponse.buttons) || [];\n      setChat([...chat, {\n        sender: \"user\",\n        message\n      }, {\n        sender: \"bot\",\n        message: botMessage,\n        buttons\n      }]);\n      setMessage('');\n    } catch (error) {\n      console.error('Error sending message to chatbot:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: chat.map((c, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [c.sender, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 16\n          }, this), \" \", c.message]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this), c.buttons && c.buttons.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: c.buttons.map((button, idx) => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setMessage(button.payload),\n            children: button.title\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: message,\n      onChange: e => setMessage(e.target.value),\n      placeholder: \"Ask me something...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"+uaI6MFTr11lxLnYd50z3kcTqJk=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Chatbot","_s","message","setMessage","chat","setChat","sendMessage","response","post","sender","botResponse","data","botMessage","text","buttons","error","console","children","map","c","index","fileName","_jsxFileName","lineNumber","columnNumber","length","button","idx","onClick","payload","title","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["/Users/aniruddhkapileshwari/Desktop/FALL24/EWA/Project/my-react-app/src/Component/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nconst Chatbot = () => {\n  const [message, setMessage] = useState('');\n  const [chat, setChat] = useState([]);\n\n  const sendMessage = async () => {\n    try {\n      // Send the user input to the Rasa REST API\n      const response = await axios.post('http://localhost:5005/webhooks/rest/webhook', {\n        sender: \"user\",\n        message: message\n      });\n\n      // Process the bot's response\n      const botResponse = response.data[0];\n      const botMessage = botResponse?.text || \"Sorry, I didn't understand that.\";\n      const buttons = botResponse?.buttons || [];\n\n      setChat([...chat, \n        { sender: \"user\", message }, \n        { sender: \"bot\", message: botMessage, buttons }\n      ]);\n      setMessage('');\n    } catch (error) {\n      console.error('Error sending message to chatbot:', error);\n    }\n  };\n\n  return (\n    <div>\n      <div>\n        {chat.map((c, index) => (\n          <div key={index}>\n            <p><strong>{c.sender}:</strong> {c.message}</p>\n            {c.buttons && c.buttons.length > 0 && (\n              <div>\n                {c.buttons.map((button, idx) => (\n                  <button key={idx} onClick={() => setMessage(button.payload)}>\n                    {button.title}\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n      <input \n        value={message}\n        onChange={(e) => setMessage(e.target.value)}\n        placeholder=\"Ask me something...\"\n      />\n      <button onClick={sendMessage}>Send</button>\n    </div>\n  );\n};\n\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}